git bash

git config --global user.name "name"
git config --global user.email "email"
git config --global init,defaultBranch main #git이름 변경


터미널
git init # git에 관리를 맡길 파일 선택
git status # git에 관리할 파일의 확인
git add 파일이름 # git이 관리하도록 전달 가능
git add . # 모든 파일 전달 가능
git commit # 모든 파일 전달
git commit -m " " # 커밋 메시지와 함께 전달
git log # commit한 정보 확인 
git diff # 파일 변경사항 자세히
git commit -am " " # 추가된 파일이 없을때 add 사용 안하고 커밋 메시지와 함께 전달
git reset --hard 해시값 # 해시값으로 돌아감 돌아갈때 파일은 전부 삭제
git revert 해시값 # 해시값을로 되돌아감
git revert --no--commit 해시값 # 해시값으로 되돌아 가지만 전달은 안됨
git reset --hard # 위의 --no--commit 취소

git branch 이름 # 새로운 브랜치 생성
git branch # 브렌치 목록 확인
git switch 이름 # 브렌치 이동
git switch -c 이름 # 브렌치 생성과 동시에 이동
git branch -m (기존 브렌치명) (바꿀 브렌치 명) # 브렌치 이름 변경
git branch -d (브렌치 명) # 브렌치 제거

git merge (붙일 브렌치 명) # 현재 브렌치에 브렌치를 병합
git merge --abort # merge 종료
git rebase (붙여질 브렌치 명) # 붙여질 브렌치 뒤에 붙일 브렌치가 추가
git merge (붙일 브렌치 명) # rebase 사용후 반드시 사용

git merge, rebase 충돌시 선택
rebase는 선택후 git add . 후에 git commit 후에 git rebase --continue실행

git에서 관리하지 않을 파일은 .gitignore 생성후 파일 추가

git remote add origin (저장소 위치) # 로컬의 git 저장소에 연결
git push -u origin mian 로컬 저장소의 커밋 내역을 원격으로 업로드
git remote # 프로젝트와 원격으로 연결된 목록
git remote -v # 자세한 내역
git push # 커밋 github에 추가
git pull # 커밋 github에서 가져오기
git pull --no--rebase # pull과 push타이밍이 틀렸을때 merge방식으로 pull
git pull --rebase # pull과 push타이밍이 틀렸을때 rebase방식으로 pull
git push --force # 강제 push

git push -u (원격이름) (이름) # 원격으로 github 브렌치 생성
git branch -all(a) # 원격으로 브렌치 보기
git fetch # 원격으로 변경사항 받기 
git switch -t (원격이름)/(브렌치 이름) # 브렌티 생성후 연결
git push (원격이름) --delete (원격의 브렌치명) # 원격의 브렌치 삭제

git clone (주소) # GITHUB에서 다운

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